{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\notal\\\\Desktop\\\\final project\\\\Staking-Dapp\\\\src\\\\components\\\\Airdrop.js\";\nimport React, { Component } from \"react\"; // import issueTokens from \"../../scripts/issue-tokens\";\n// const issue = require(\"../scripts/issue-tokens\");\n\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  // // calls load web3 before rendering\n  // async UNSAFE_componentWillMount() {\n  //   // loading blochain Data\n  //   await this.loadBlockchainData();\n  // }\n  // async loadBlockchainData() {\n  //   const web3 = window.web3;\n  //   // setup network id and hook it up to our contract\n  //   const networkId = await web3.eth.net.getId();\n  //   console.log(networkId);\n  //   // load in Decentral bank contract\n  //   const decentralBankData = DecentralBank.networks[networkId];\n  //   if (decentralBankData) {\n  //     // get the abi and address of the contract andsend it to rwd variable using web3\n  //     const decentralBank = new web3.eth.Contract(\n  //       DecentralBank.abi,\n  //       decentralBankData.address\n  //     );\n  //     console.log(decentralBank);\n  //     this.setState({ decentralBank });\n  //   } else {\n  //     window.alert(\"Error Bank!! No Detected network\");\n  //   }\n  // }\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      //86400\n      time: {},\n      seconds: 10,\n      decentralBank: {}\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // function to calculate how many hours, minutes, and seconds from total seconds\n\n\n  _createClass(Airdrop, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds;\n      hours = Math.floor(secs / (60 * 60));\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60);\n      var devisor_for_seconds = devisor_for_minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds);\n      var obj = {\n        h: hours,\n        m: minutes,\n        s: seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      //  countdown one second at a time\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // stop counting when we hit zero\n\n      if (seconds == 0) {\n        clearInterval(this.timer); // this.state.decentralBank.methods\n        //   .issueTokens()\n        //   .call({ from: \"0x941A8910Cd702ba920CeC301095593b912A6834d\" });\n\n        this.props.issue();\n        console.log(\"hello\");\n      }\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeft = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeft\n      });\n    }\n  }, {\n    key: \"airdropReleaseTokens\",\n    value: function airdropReleaseTokens() {\n      var stakingB = this.props.stakingBalance;\n\n      if (stakingB >= \"50000000000000000000\") {\n        this.startTimer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.airdropReleaseTokens();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\",\n          fontSize: \"20px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, this.state.time.h, \":\", this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["C:/Users/notal/Desktop/final project/Staking-Dapp/src/components/Airdrop.js"],"names":["React","Component","DecentralBank","Airdrop","state","time","seconds","decentralBank","timer","startTimer","bind","countDown","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","h","m","s","setState","secondsToTime","clearInterval","props","issue","console","log","setInterval","timeLeft","stakingB","stakingBalance","airdropReleaseTokens","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\n// import issueTokens from \"../../scripts/issue-tokens\";\n// const issue = require(\"../scripts/issue-tokens\");\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\n\nclass Airdrop extends Component {\n  // // calls load web3 before rendering\n  // async UNSAFE_componentWillMount() {\n  //   // loading blochain Data\n  //   await this.loadBlockchainData();\n  // }\n\n  // async loadBlockchainData() {\n  //   const web3 = window.web3;\n\n  //   // setup network id and hook it up to our contract\n  //   const networkId = await web3.eth.net.getId();\n  //   console.log(networkId);\n\n  //   // load in Decentral bank contract\n  //   const decentralBankData = DecentralBank.networks[networkId];\n  //   if (decentralBankData) {\n  //     // get the abi and address of the contract andsend it to rwd variable using web3\n  //     const decentralBank = new web3.eth.Contract(\n  //       DecentralBank.abi,\n  //       decentralBankData.address\n  //     );\n\n  //     console.log(decentralBank);\n  //     this.setState({ decentralBank });\n  //   } else {\n  //     window.alert(\"Error Bank!! No Detected network\");\n  //   }\n  // }\n\n  constructor() {\n    super();\n    this.state = {\n      //86400\n      time: {},\n      seconds: 10,\n      decentralBank: {},\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  // function to calculate how many hours, minutes, and seconds from total seconds\n  secondsToTime(secs) {\n    let hours, minutes, seconds;\n    hours = Math.floor(secs / (60 * 60));\n\n    let devisor_for_minutes = secs % (60 * 60);\n    minutes = Math.floor(devisor_for_minutes / 60);\n\n    let devisor_for_seconds = devisor_for_minutes % 60;\n    seconds = Math.ceil(devisor_for_seconds);\n\n    let obj = {\n      h: hours,\n      m: minutes,\n      s: seconds,\n    };\n    return obj;\n  }\n\n  countDown() {\n    //  countdown one second at a time\n    let seconds = this.state.seconds - 1;\n\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n    // stop counting when we hit zero\n    if (seconds == 0) {\n      clearInterval(this.timer);\n      // this.state.decentralBank.methods\n      //   .issueTokens()\n      //   .call({ from: \"0x941A8910Cd702ba920CeC301095593b912A6834d\" });\n      this.props.issue();\n      console.log(\"hello\");\n    }\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  componentDidMount() {\n    let timeLeft = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeft });\n  }\n\n  airdropReleaseTokens() {\n    let stakingB = this.props.stakingBalance;\n    if (stakingB >= \"50000000000000000000\") {\n      this.startTimer();\n    }\n  }\n\n  render() {\n    this.airdropReleaseTokens();\n\n    return (\n      <div style={{ color: \"black\", fontWeight: \"bold\", fontSize: \"20px\" }}>\n        {this.state.time.h}:{this.state.time.m}:{this.state.time.s}\n      </div>\n    );\n  }\n}\n\nexport default Airdrop;\n"]},"metadata":{},"sourceType":"module"}