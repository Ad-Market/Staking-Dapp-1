{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\src\\\\components\\\\Airdrop.js\";\nimport React, { Component } from \"react\"; // import issueTokens from \"../../scripts/issue-tokens\";\n// var issue = require(\"../scripts/issue-tokens\");\n\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\n\nfunction issue() {\n  return _issue.apply(this, arguments);\n}\n\nfunction _issue() {\n  _issue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var web3, account, networkId, decentralBankData, decentralBank;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            web3 = window.web3;\n            _context.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            account = _context.sent;\n            // set state to display the account number in navbar\n            this.setState({\n              account: account[0]\n            }); // setup network id and hook it up to our contract\n\n            _context.next = 7;\n            return web3.eth.net.getId();\n\n          case 7:\n            networkId = _context.sent;\n            // load in Decentral bank contract\n            decentralBankData = DecentralBank.networks[networkId];\n\n            if (!decentralBankData) {\n              _context.next = 15;\n              break;\n            }\n\n            // get the abi and address of the contract andsend it to rwd variable using web3\n            decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n            _context.next = 13;\n            return decentralBank.methods.issueTokens().send;\n\n          case 13:\n            _context.next = 16;\n            break;\n\n          case 15:\n            window.alert(\"Error Bank!! No Detected network\");\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _issue.apply(this, arguments);\n}\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 30\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // function to calculate how many hours, minutes, and seconds from total seconds\n\n\n  _createClass(Airdrop, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds;\n      hours = Math.floor(secs / (60 * 60));\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60);\n      var devisor_for_seconds = devisor_for_minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds);\n      var obj = {\n        h: hours,\n        m: minutes,\n        s: seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      //  countdown one second at a time\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // stop counting when we hit zero\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n        issue();\n      }\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeft = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeft\n      });\n    }\n  }, {\n    key: \"airdropReleaseTokens\",\n    value: function airdropReleaseTokens() {\n      var stakingB = this.props.stakingBalance;\n\n      if (stakingB >= \"50000000000000000000\") {\n        this.startTimer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.airdropReleaseTokens();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"black\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["C:/Users/notal/Desktop/Final Project/Staking-Dapp/src/components/Airdrop.js"],"names":["React","Component","DecentralBank","issue","web3","window","eth","getAccounts","account","setState","net","getId","networkId","decentralBankData","networks","decentralBank","Contract","abi","address","methods","issueTokens","send","alert","Airdrop","state","time","seconds","timer","startTimer","bind","countDown","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","h","m","s","secondsToTime","clearInterval","setInterval","timeLeft","stakingB","props","stakingBalance","airdropReleaseTokens","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n// import issueTokens from \"../../scripts/issue-tokens\";\r\n// var issue = require(\"../scripts/issue-tokens\");\r\n\r\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\r\n\r\nasync function issue() {\r\n  const web3 = window.web3;\r\n  const account = await web3.eth.getAccounts();\r\n\r\n  // set state to display the account number in navbar\r\n  this.setState({ account: account[0] });\r\n\r\n  // setup network id and hook it up to our contract\r\n  const networkId = await web3.eth.net.getId();\r\n  // load in Decentral bank contract\r\n  const decentralBankData = DecentralBank.networks[networkId];\r\n  if (decentralBankData) {\r\n    // get the abi and address of the contract andsend it to rwd variable using web3\r\n    const decentralBank = new web3.eth.Contract(\r\n      DecentralBank.abi,\r\n      decentralBankData.address\r\n    );\r\n    await decentralBank.methods.issueTokens().send;\r\n  } else {\r\n    window.alert(\"Error Bank!! No Detected network\");\r\n  }\r\n}\r\n\r\nclass Airdrop extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      time: {},\r\n      seconds: 30,\r\n    };\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  // function to calculate how many hours, minutes, and seconds from total seconds\r\n  secondsToTime(secs) {\r\n    let hours, minutes, seconds;\r\n    hours = Math.floor(secs / (60 * 60));\r\n\r\n    let devisor_for_minutes = secs % (60 * 60);\r\n    minutes = Math.floor(devisor_for_minutes / 60);\r\n\r\n    let devisor_for_seconds = devisor_for_minutes % 60;\r\n    seconds = Math.ceil(devisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  countDown() {\r\n    //  countdown one second at a time\r\n    let seconds = this.state.seconds - 1;\r\n\r\n    this.setState({\r\n      time: this.secondsToTime(seconds),\r\n      seconds: seconds,\r\n    });\r\n    // stop counting when we hit zero\r\n    if (seconds == 0) {\r\n      clearInterval(this.timer);\r\n      issue();\r\n    }\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timer == 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeLeft = this.secondsToTime(this.state.seconds);\r\n    this.setState({ time: timeLeft });\r\n  }\r\n\r\n  airdropReleaseTokens() {\r\n    let stakingB = this.props.stakingBalance;\r\n    if (stakingB >= \"50000000000000000000\") {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.airdropReleaseTokens();\r\n\r\n    return (\r\n      <div style={{ color: \"black\" }}>\r\n        {this.state.time.m}:{this.state.time.s}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Airdrop;\r\n"]},"metadata":{},"sourceType":"module"}