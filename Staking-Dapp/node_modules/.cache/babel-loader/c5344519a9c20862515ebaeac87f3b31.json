{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\src\\\\components\\\\Airdrop.js\";\nimport React, { Component } from \"react\";\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 30\n    };\n    _this.timer = 0; // this.startTimer = this.startTimer.bind(this);\n    // this.countDown = this.countDown.bind(this);\n\n    return _this;\n  } // function to calculate how many hours, minutes, and seconds from total seconds\n\n\n  _createClass(Airdrop, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds;\n      hours = Math.floor(secs / (60 * 60));\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60);\n      var devisor_for_seconds = devisor_for_minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds);\n      var obj = {\n        h: hours,\n        m: minutes,\n        s: seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      // 1 . countdown one second at a time\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // 2. stop counting when we hit zero\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeft = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeft\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"black\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }, this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["C:/Users/notal/Desktop/Final Project/Staking-Dapp/src/components/Airdrop.js"],"names":["React","Component","Airdrop","state","time","seconds","timer","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","h","m","s","setState","secondsToTime","clearInterval","setInterval","countDown","timeLeft","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,O;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAIA,UAAKC,KAAL,GAAa,CAAb,CANY,CAOZ;AACA;;AARY;AASb,G,CAED;;;;;kCACcC,I,EAAM;AAClB,UAAIC,KAAJ,EAAWC,OAAX,EAAoBJ,OAApB;AACAG,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAK,EAAT,CAAf,CAAR;AAEA,UAAIK,mBAAmB,GAAGL,IAAI,IAAI,KAAK,EAAT,CAA9B;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAV;AAEA,UAAIC,mBAAmB,GAAGD,mBAAmB,GAAG,EAAhD;AACAP,MAAAA,OAAO,GAAGK,IAAI,CAACI,IAAL,CAAUD,mBAAV,CAAV;AAEA,UAAIE,GAAG,GAAG;AACRC,QAAAA,CAAC,EAAER,KADK;AAERS,QAAAA,CAAC,EAAER,OAFK;AAGRS,QAAAA,CAAC,EAAEb;AAHK,OAAV;AAKA,aAAOU,GAAP;AACD;;;gCAEW;AACV;AACA,UAAIV,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AAEA,WAAKc,QAAL,CAAc;AACZf,QAAAA,IAAI,EAAE,KAAKgB,aAAL,CAAmBf,OAAnB,CADM;AAEZA,QAAAA,OAAO,EAAEA;AAFG,OAAd,EAJU,CAQV;;AACA,UAAIA,OAAO,IAAI,CAAf,EAAkB;AAChBgB,QAAAA,aAAa,CAAC,KAAKf,KAAN,CAAb;AACD;AACF;;;iCAEY;AACX,UAAI,KAAKA,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA5C,EAA+C;AAC7C,aAAKC,KAAL,GAAagB,WAAW,CAAC,KAAKC,SAAN,EAAiB,IAAjB,CAAxB;AACD;AACF;;;wCAEmB;AAClB,UAAIC,QAAQ,GAAG,KAAKJ,aAAL,CAAmB,KAAKjB,KAAL,CAAWE,OAA9B,CAAf;AACA,WAAKc,QAAL,CAAc;AAAEf,QAAAA,IAAI,EAAEoB;AAAR,OAAd;AACD;;;6BAEQ;AACP,0BACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKtB,KAAL,CAAWC,IAAX,CAAgBa,CADnB,OACuB,KAAKd,KAAL,CAAWC,IAAX,CAAgBc,CADvC,CADF;AAKD;;;;EA9DmBjB,S;;AAiEtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Airdrop extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      time: {},\r\n      seconds: 30,\r\n    };\r\n    this.timer = 0;\r\n    // this.startTimer = this.startTimer.bind(this);\r\n    // this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  // function to calculate how many hours, minutes, and seconds from total seconds\r\n  secondsToTime(secs) {\r\n    let hours, minutes, seconds;\r\n    hours = Math.floor(secs / (60 * 60));\r\n\r\n    let devisor_for_minutes = secs % (60 * 60);\r\n    minutes = Math.floor(devisor_for_minutes / 60);\r\n\r\n    let devisor_for_seconds = devisor_for_minutes % 60;\r\n    seconds = Math.ceil(devisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  countDown() {\r\n    // 1 . countdown one second at a time\r\n    let seconds = this.state.seconds - 1;\r\n\r\n    this.setState({\r\n      time: this.secondsToTime(seconds),\r\n      seconds: seconds,\r\n    });\r\n    // 2. stop counting when we hit zero\r\n    if (seconds == 0) {\r\n      clearInterval(this.timer);\r\n    }\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timer == 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeLeft = this.secondsToTime(this.state.seconds);\r\n    this.setState({ time: timeLeft });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ color: \"black\" }}>\r\n        {this.state.time.m}:{this.state.time.s}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Airdrop;\r\n"]},"metadata":{},"sourceType":"module"}