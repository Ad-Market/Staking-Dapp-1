{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\notal\\\\Desktop\\\\Final Project\\\\Staking-Dapp\\\\src\\\\components\\\\App.js\";\n// main applications where to render all the componenets\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle_abis/Tether.json\";\nimport RWD from \"../truffle_abis/RWD.json\";\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\nimport Main from \"./Main.js\";\nimport ParticleSettings from \"./ParticleSettings\"; // create class for component\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    // calls load web3 before rendering\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() // web3 detect metamask when loading page\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                // create new instance for web3\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  // if we find web3 then we go with the provider\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"No ethereum browser detected, example: MetaMast\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBlance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                // set state to display the account number in navbar\n                this.setState({\n                  account: account[0]\n                }); // setup network id and hook it up to our contract\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // load in tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                // get the abi and address of the contract andsend it to tether variable using web3\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                }); // get balance of the account\n\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert(\"Error Tether!! No Detected network\");\n\n              case 19:\n                // load in RWD contract\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                // get the abi and address of the contract andsend it to rwd variable using web3\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                }); // get balance of the account\n\n                _context3.next = 25;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                }); //console.log({ rwdBalance: rwdBalance });\n\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert(\"Error RWD!! No Detected network\");\n\n              case 30:\n                // load in Decentral bank contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                // get the abi and address of the contract andsend it to rwd variable using web3\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                }); // get balance of the account\n\n                _context3.next = 36;\n                return decentralBank.methods.stakingBlanace(this.state.account).call();\n\n              case 36:\n                stakingBlance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBlance.toString()\n                }); //console.log({ stakignBalance: stakingBlance });\n\n                _context3.next = 41;\n                break;\n\n              case 40:\n                window.alert(\"Error Bank!! No Detected network\");\n\n              case 41:\n                this.setState({\n                  loading: false\n                });\n\n              case 42:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // funstion for unstaking that grabs the unstake tokens from DecentralBank contracts\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); // innitializing state\n\n    _this.unstakeTokens = function () {\n      // reset loading to true\n      _this.setState({\n        loading: true\n      }); // grabbind unstake function from decentralBank for this account from state\n\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on(\"transactionHash\", function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.stakeTokens = function (amount) {\n      // reset loading to true\n      _this.setState({\n        loading: true\n      }); // grabbind deposit function from decentralBank for this account from state\n\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on(\"transactionHash\", function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on(\"transactionHash\", function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: \"0x0\",\n      // for getting contracts from abis\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: \"0\",\n      rwdBalance: \"0\",\n      stakingBalance: \"0\",\n      loading: true\n    };\n    return _this;\n  } // rendering components to the screen\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      // to hod the content while and after loading\n      var content;\n      {\n        // if loading display LOADING ...\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: \"30px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }\n        }, \"LAODING ...\") : // else render the main component\n        content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: \"relative\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: \"absolute\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        style: {\n          marginTop: \"10%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: \"600px\",\n          minHeight: \"100vm\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/notal/Desktop/Final Project/Staking-Dapp/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","ParticleSettings","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBlanace","stakingBlance","stakingBalance","loading","props","unstakeTokens","send","from","on","hash","stakeTokens","amount","approve","_address","depositTokens","content","margin","position","marginTop","maxWidth","minHeight"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CAEA;;IACMC,G;;;;;AACJ;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBAEA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAGR;;;;;;;;;;qBAGMC,MAAM,CAACC,Q;;;;;AACT;AACAD,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIX,IAAJ,CAASS,MAAM,CAACC,QAAhB,CAAd;;uBACMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AACD,oBAAIH,MAAM,CAACE,IAAX,EAAiB;AACtB;AACAF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIX,IAAJ,CAASS,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,iBAHM,MAGA;AACLJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,iDAAb;AACD;;;;;;;;;;;;;;;;;;;;;;;;;AAIKH,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACEA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAhBC,gBAAAA,O;AAEN;AACA,qBAAKC,QAAL,CAAc;AAAED,kBAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AAAlB,iBAAd,E,CAEA;;;uBACwBN,IAAI,CAACI,GAAL,CAASI,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AAEN;AACMC,gBAAAA,U,GAAarB,MAAM,CAACsB,QAAP,CAAgBF,SAAhB,C;;qBACfC,U;;;;;AACF;AACME,gBAAAA,M,GAAS,IAAIb,IAAI,CAACI,GAAL,CAASU,QAAb,CAAsBxB,MAAM,CAACyB,GAA7B,EAAkCJ,UAAU,CAACK,OAA7C,C;AACf,qBAAKT,QAAL,CAAc;AAAEM,kBAAAA,MAAM,EAANA;AAAF,iBAAd,E,CAEA;;;uBAC0BA,MAAM,CAACI,OAAP,CACvBC,SADuB,CACb,KAAKC,KAAL,CAAWb,OADE,EAEvBc,IAFuB,E;;;AAAtBC,gBAAAA,a;AAGJ,qBAAKd,QAAL,CAAc;AAAEc,kBAAAA,aAAa,EAAEA,aAAa,CAACC,QAAd;AAAjB,iBAAd;;;;;AAEAxB,gBAAAA,MAAM,CAACK,KAAP,CAAa,oCAAb;;;AAGF;AACMoB,gBAAAA,O,GAAUhC,GAAG,CAACqB,QAAJ,CAAaF,SAAb,C;;qBACZa,O;;;;;AACF;AACMC,gBAAAA,G,GAAM,IAAIxB,IAAI,CAACI,GAAL,CAASU,QAAb,CAAsBvB,GAAG,CAACwB,GAA1B,EAA+BQ,OAAO,CAACP,OAAvC,C;AACZ,qBAAKT,QAAL,CAAc;AAAEiB,kBAAAA,GAAG,EAAHA;AAAF,iBAAd,E,CAEA;;;uBACuBA,GAAG,CAACP,OAAJ,CAAYC,SAAZ,CAAsB,KAAKC,KAAL,CAAWb,OAAjC,EAA0Cc,IAA1C,E;;;AAAnBK,gBAAAA,U;AACJ,qBAAKlB,QAAL,CAAc;AAAEkB,kBAAAA,UAAU,EAAEA,UAAU,CAACH,QAAX;AAAd,iBAAd,E,CACA;;;;;;AAEAxB,gBAAAA,MAAM,CAACK,KAAP,CAAa,iCAAb;;;AAGF;AACMuB,gBAAAA,iB,GAAoBlC,aAAa,CAACoB,QAAd,CAAuBF,SAAvB,C;;qBACtBgB,iB;;;;;AACF;AACMC,gBAAAA,a,GAAgB,IAAI3B,IAAI,CAACI,GAAL,CAASU,QAAb,CACpBtB,aAAa,CAACuB,GADM,EAEpBW,iBAAiB,CAACV,OAFE,C;AAItB,qBAAKT,QAAL,CAAc;AAAEoB,kBAAAA,aAAa,EAAbA;AAAF,iBAAd,E,CAEA;;;uBAC0BA,aAAa,CAACV,OAAd,CACvBW,cADuB,CACR,KAAKT,KAAL,CAAWb,OADH,EAEvBc,IAFuB,E;;;AAAtBS,gBAAAA,a;AAGJ,qBAAKtB,QAAL,CAAc;AAAEuB,kBAAAA,cAAc,EAAED,aAAa,CAACP,QAAd;AAAlB,iBAAd,E,CACA;;;;;;AAEAxB,gBAAAA,MAAM,CAACK,KAAP,CAAa,kCAAb;;;AAGF,qBAAKI,QAAL,CAAc;AAAEwB,kBAAAA,OAAO,EAAE;AAAX,iBAAd;;;;;;;;;;;;;;;QAGF;;;;AA+BA,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN,GADiB,CAEjB;;AAFiB,UA9BnBC,aA8BmB,GA9BH,YAAM;AACpB;AACA,YAAK1B,QAAL,CAAc;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAd,EAFoB,CAGpB;;;AACA,YAAKZ,KAAL,CAAWQ,aAAX,CAAyBV,OAAzB,CACGgB,aADH,GAEGC,IAFH,CAEQ;AAAEC,QAAAA,IAAI,EAAE,MAAKhB,KAAL,CAAWb;AAAnB,OAFR,EAGG8B,EAHH,CAGM,iBAHN,EAGyB,UAACC,IAAD,EAAU;AAC/B,cAAK9B,QAAL,CAAc;AAAEwB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD,OALH;AAMD,KAoBkB;;AAAA,UAjBnBO,WAiBmB,GAjBL,UAACC,MAAD,EAAY;AACxB;AACA,YAAKhC,QAAL,CAAc;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAd,EAFwB,CAGxB;;;AACA,YAAKZ,KAAL,CAAWN,MAAX,CAAkBI,OAAlB,CACGuB,OADH,CACW,MAAKrB,KAAL,CAAWQ,aAAX,CAAyBc,QADpC,EAC8CF,MAD9C,EAEGL,IAFH,CAEQ;AAAEC,QAAAA,IAAI,EAAE,MAAKhB,KAAL,CAAWb;AAAnB,OAFR,EAGG8B,EAHH,CAGM,iBAHN,EAGyB,UAACC,IAAD,EAAU;AAC/B,cAAKlB,KAAL,CAAWQ,aAAX,CAAyBV,OAAzB,CACGyB,aADH,CACiBH,MADjB,EAEGL,IAFH,CAEQ;AAAEC,UAAAA,IAAI,EAAE,MAAKhB,KAAL,CAAWb;AAAnB,SAFR,EAGG8B,EAHH,CAGM,iBAHN,EAGyB,UAACC,IAAD,EAAU;AAC/B,gBAAK9B,QAAL,CAAc;AAAEwB,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SALH;AAMD,OAVH;AAWD,KAEkB;;AAGjB,UAAKZ,KAAL,GAAa;AACXb,MAAAA,OAAO,EAAE,KADE;AAEX;AACAO,MAAAA,MAAM,EAAE,EAHG;AAIXW,MAAAA,GAAG,EAAE,EAJM;AAKXG,MAAAA,aAAa,EAAE,EALJ;AAMXN,MAAAA,aAAa,EAAE,GANJ;AAOXI,MAAAA,UAAU,EAAE,GAPD;AAQXK,MAAAA,cAAc,EAAE,GARL;AASXC,MAAAA,OAAO,EAAE;AATE,KAAb;AAHiB;AAclB,G,CAED;;;;;6BACS;AACP;AACA,UAAIY,OAAJ;AACA;AACE;AACA,aAAKxB,KAAL,CAAWY,OAAX,GACKY,OAAO,gBACN;AAAG,UAAA,EAAE,EAAC,QAAN;AAAe,UAAA,SAAS,EAAC,aAAzB;AAAuC,UAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFN,GAMI;AACCD,QAAAA,OAAO,gBACN,oBAAC,IAAD;AACE,UAAA,aAAa,EAAE,KAAKxB,KAAL,CAAWE,aAD5B;AAEE,UAAA,UAAU,EAAE,KAAKF,KAAL,CAAWM,UAFzB;AAGE,UAAA,cAAc,EAAE,KAAKN,KAAL,CAAWW,cAH7B;AAIE,UAAA,WAAW,EAAE,KAAKQ,WAJpB;AAKE,UAAA,aAAa,EAAE,KAAKL,aALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARN;AAgBD;AACD,0BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,KAAK,EAAE;AAAEY,UAAAA,QAAQ,EAAE;AAAZ,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,KAAK,EAAE;AAAEA,UAAAA,QAAQ,EAAE;AAAZ,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,eAKE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWb,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,eAME;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAsC,QAAA,KAAK,EAAE;AAAEwC,UAAAA,SAAS,EAAE;AAAb,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAC,2BAFZ;AAGE,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,SAAS,EAAE;AAAhC,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAML,OAAN,CALF,CADF,CADF,CANF,CADF;AAoBD;;;;EAlLexD,S;;AAqLlB,eAAeQ,GAAf","sourcesContent":["// main applications where to render all the componenets\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./Navbar\";\r\nimport Web3 from \"web3\";\r\nimport Tether from \"../truffle_abis/Tether.json\";\r\nimport RWD from \"../truffle_abis/RWD.json\";\r\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\r\nimport Main from \"./Main.js\";\r\nimport ParticleSettings from \"./ParticleSettings\";\r\n\r\n// create class for component\r\nclass App extends Component {\r\n  // calls load web3 before rendering\r\n  async UNSAFE_componentWillMount() {\r\n    // calling load web3\r\n    await this.loadWeb3();\r\n    // loading blochain Data\r\n    await this.loadBlockchainData();\r\n  }\r\n\r\n  // web3 detect metamask when loading page\r\n  async loadWeb3() {\r\n    // if we detect metamask\r\n    if (window.ethereum) {\r\n      // create new instance for web3\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      // if we find web3 then we go with the provider\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\"No ethereum browser detected, example: MetaMast\");\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3;\r\n    const account = await web3.eth.getAccounts();\r\n\r\n    // set state to display the account number in navbar\r\n    this.setState({ account: account[0] });\r\n\r\n    // setup network id and hook it up to our contract\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    // load in tether contract\r\n    const tetherData = Tether.networks[networkId];\r\n    if (tetherData) {\r\n      // get the abi and address of the contract andsend it to tether variable using web3\r\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n      this.setState({ tether });\r\n\r\n      // get balance of the account\r\n      let tetherBalance = await tether.methods\r\n        .balanceOf(this.state.account)\r\n        .call();\r\n      this.setState({ tetherBalance: tetherBalance.toString() });\r\n    } else {\r\n      window.alert(\"Error Tether!! No Detected network\");\r\n    }\r\n\r\n    // load in RWD contract\r\n    const rwdData = RWD.networks[networkId];\r\n    if (rwdData) {\r\n      // get the abi and address of the contract andsend it to rwd variable using web3\r\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\r\n      this.setState({ rwd });\r\n\r\n      // get balance of the account\r\n      let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\r\n      this.setState({ rwdBalance: rwdBalance.toString() });\r\n      //console.log({ rwdBalance: rwdBalance });\r\n    } else {\r\n      window.alert(\"Error RWD!! No Detected network\");\r\n    }\r\n\r\n    // load in Decentral bank contract\r\n    const decentralBankData = DecentralBank.networks[networkId];\r\n    if (decentralBankData) {\r\n      // get the abi and address of the contract andsend it to rwd variable using web3\r\n      const decentralBank = new web3.eth.Contract(\r\n        DecentralBank.abi,\r\n        decentralBankData.address\r\n      );\r\n      this.setState({ decentralBank });\r\n\r\n      // get balance of the account\r\n      let stakingBlance = await decentralBank.methods\r\n        .stakingBlanace(this.state.account)\r\n        .call();\r\n      this.setState({ stakingBalance: stakingBlance.toString() });\r\n      //console.log({ stakignBalance: stakingBlance });\r\n    } else {\r\n      window.alert(\"Error Bank!! No Detected network\");\r\n    }\r\n\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  // funstion for unstaking that grabs the unstake tokens from DecentralBank contracts\r\n  unstakeTokens = () => {\r\n    // reset loading to true\r\n    this.setState({ loading: true });\r\n    // grabbind unstake function from decentralBank for this account from state\r\n    this.state.decentralBank.methods\r\n      .unstakeTokens()\r\n      .send({ from: this.state.account })\r\n      .on(\"transactionHash\", (hash) => {\r\n        this.setState({ loading: false });\r\n      });\r\n  };\r\n\r\n  // funstion for staking that grabs the diposit tokens from DecentralBank contracts\r\n  stakeTokens = (amount) => {\r\n    // reset loading to true\r\n    this.setState({ loading: true });\r\n    // grabbind deposit function from decentralBank for this account from state\r\n    this.state.tether.methods\r\n      .approve(this.state.decentralBank._address, amount)\r\n      .send({ from: this.state.account })\r\n      .on(\"transactionHash\", (hash) => {\r\n        this.state.decentralBank.methods\r\n          .depositTokens(amount)\r\n          .send({ from: this.state.account })\r\n          .on(\"transactionHash\", (hash) => {\r\n            this.setState({ loading: false });\r\n          });\r\n      });\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // innitializing state\r\n    this.state = {\r\n      account: \"0x0\",\r\n      // for getting contracts from abis\r\n      tether: {},\r\n      rwd: {},\r\n      decentralBank: {},\r\n      tetherBalance: \"0\",\r\n      rwdBalance: \"0\",\r\n      stakingBalance: \"0\",\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  // rendering components to the screen\r\n  render() {\r\n    // to hod the content while and after loading\r\n    let content;\r\n    {\r\n      // if loading display LOADING ...\r\n      this.state.loading\r\n        ? (content = (\r\n            <p id=\"loader\" className=\"text-center\" style={{ margin: \"30px\" }}>\r\n              LAODING ...\r\n            </p>\r\n          ))\r\n        : // else render the main component\r\n          (content = (\r\n            <Main\r\n              tetherBalance={this.state.tetherBalance}\r\n              rwdBalance={this.state.rwdBalance}\r\n              stakingBalance={this.state.stakingBalance}\r\n              stakeTokens={this.stakeTokens}\r\n              unstakeTokens={this.unstakeTokens}\r\n            />\r\n          ));\r\n    }\r\n    return (\r\n      <div className=\"App\" style={{ position: \"relative\" }}>\r\n        <div style={{ position: \"absolute\" }}>\r\n          <ParticleSettings />\r\n        </div>\r\n\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\" style={{ marginTop: \"10%\" }}>\r\n          <div className=\"row\">\r\n            <main\r\n              role=\"main\"\r\n              className=\"col-lg-12 ml-auto mr-auto\"\r\n              style={{ maxWidth: \"600px\", minHeight: \"100vm\" }}\r\n            >\r\n              <div>{content}</div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}